DELIMITER //
SET GLOBAL log_bin_trust_function_creators = 1;

/* DROP AND CLEAN */
DROP TABLE IF EXISTS users //
DROP TABLE IF EXISTS apiTokens //
DROP FUNCTION IF EXISTS genApiToken //

/* TABLES */
CREATE TABLE apiTokens(
    ID INT NOT NULL AUTO_INCREMENT,
    TX_USER VARCHAR(256) NOT NULL,
    TX_PASSWORD VARCHAR(256) NOT NULL,
    TX_ACCESS_TOKEN VARCHAR(256) DEFAULT NULL,
    TS_VALID_UPTO TIMESTAMP DEFAULT NULL,
    CONSTRAINT PK_API_TOKENS PRIMARY KEY(ID)
)
//

CREATE TABLE users (
    ID INT NOT NULL AUTO_INCREMENT,
    TX_USERNAME VARCHAR(32) NOT NULL,
    TX_PASSWORD VARCHAR(256) NOT NULL,
    TX_EMAIL VARCHAR(512) NOT NULL,
    CONSTRAINT PK_USERS PRIMARY KEY(ID)
)
//

/* TRIGGERS */

/* DEFAULT DATA */
INSERT INTO apiTokens VALUES (1, 'bd01b0b648c2c64eb1bddd9361d9972ea684b344fedc4d166654a85e8919e7ad', 
'0fb2044727c60877316b644ac35c72963f8d77567c7d8387f36193b05d38aaee', NULL, NULL) //

INSERT INTO users VALUES (1, 'andre.cintra', SHA2('endgame', 256), 'arcin_es@hotmail.com') //

/* PROCEDURES AND FUNCTIONS */

CREATE FUNCTION genApiToken (v_user VARCHAR(256), v_key VARCHAR(256))
RETURNS BOOLEAN
BEGIN
    DECLARE newToken VARCHAR(256);
    DECLARE tokenID INT DEFAULT NULL;

    SELECT ID INTO tokenID FROM apiTokens
    WHERE TX_USER = SHA2(v_user, 256)
    AND TX_PASSWORD = SHA2(v_key, 256);

    IF tokenID <> NULL THEN
        SET newToken = SHA2(SYSDATE, 256);

        UPDATE apiTokens
        SET 
            TX_ACCESS_TOKEN = newToken,
            TS_VALID_UPTO = DATE_ADD(SYSDATE, INTERVAL 2 HOUR)
        WHERE ID = tokenID;

        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;

END
//